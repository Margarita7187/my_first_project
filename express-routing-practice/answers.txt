1. Express.js упрощает разработку сервера по сравнению с чистым Node.js: удобная система роутинга, встроенные middleware, меньше boilerplate-кода, проще обработка ошибок, богатая экосистема промежуточного ПО.

2. Middleware в Express — это функции, имеющие доступ к объектам запроса, ответа и следующей функции middleware в цикле запрос-ответ. Порядок выполнения определяется порядком их объявления в коде.

3. Модульная структура роутеров организуется через express.Router(): создаются отдельные файлы роутеров для разных сущностей, которые подключаются в главный файл приложения через app.use().

4. Express поддерживает методы роутинга, соответствующие HTTP-методам: app.get(), app.post(), app.put(), app.delete(), app.patch() и другие. Они используются для обработки конкретных типов запросов по определенным путям.

5. Параметры URL (route parameters) доступны через req.params, query-параметры — через req.query. Например, в маршруте '/users/:id' параметр id будет в req.params.id.

6. app.use() используется для подключения middleware ко всем HTTP-методам, app.METHOD() (например, app.get()) — только для конкретного HTTP-метода. app.use() часто применяется для глобальных middleware, app.METHOD() — для обработки конкретных маршрутов.

7. Централизованная обработка ошибок организуется через специальный middleware с четырьмя параметрами (err, req, res, next), который размещается после всех роутеров. В него попадают все ошибки из предыдущих middleware и роутеров.

8. router.param() — это middleware, которое выполняется когда в пути встречается определенный параметр. Используется для валидации, загрузки данных из БД и предварительной обработки параметров перед основными обработчиками маршрутов.