1. Function Declaration поднимается (hoisted) полностью, можно вызывать до объявления. Function Expression поднимается только как переменная, вызов до объявления вызовет ошибку.

2. Rest parameters создают настоящий массив из оставшихся аргументов, arguments - объект подобный массиву. Rest parameters более современны и удобны.

3. Замыкание - функция + её лексическое окружение. Функция запоминает переменные из области где была создана, даже после выхода из неё.

4. Рекурсия проще для древовидных структур и задач с естественной рекурсивной природой, но может привести к переполнению стека. Итерация эффективнее по памяти для простых циклов.

5. Функции высшего порядка принимают или возвращают другие функции. map, filter, reduce, setTimeout - примеры таких функций.

6. Каррирование превращает функцию от многих аргументов в цепочку функций от одного аргумента. Дает возможность частичного применения и создания специализированных функций.

7. Мемоизация кэширует результаты вызовов функций. Эффективна для дорогих вычислений с одинаковыми аргументами, как факториал или числа Фибоначчи.

8. Debounce откладывает вызов до паузы в событиях (поиск при вводе). Throttle ограничивает частоту вызовов (обработка скролла). Используются для оптимизации производительности.

9. Функции-генераторы можно приостанавливать и возобновлять с помощью yield, возвращают итератор. Обычные функции выполняются полностью за один вызов.

10. Применены: чистые функции (без побочных эффектов), функции высшего порядка, композиция. Benefits: код проще тестировать, отлаживать и повторно использовать.