1. Node.js позволяет запускать JavaScript на сервере. Его преимущества: один язык на клиенте и сервере, высокая скорость обработки запросов, большое количество готовых библиотек.

2. Простой HTTP-сервер создается через модуль http: require('http'), createServer(), server.listen(порт). В функции-обработчике можно работать с запросом и ответом.

3. GET - получить данные, POST - создать новые данные, PUT - обновить существующие данные, DELETE - удалить данные. Это стандартные HTTP-методы для работы с данными.

4. Middleware - промежуточные функции, которые выполняются перед основным обработчиком запроса. Используются для проверки авторизации, логирования, обработки данных запроса.

5. Для одного URL можно обрабатывать разные методы через проверку req.method в Node.js или используя отдельные маршруты в Express (app.get(), app.post() и т.д.).

6. CORS - механизм безопасности браузера, который блокирует запросы между разными доменами. Заголовки CORS разрешают такие запросы для API.

7. В нативном Node.js тело POST-запроса читается по частям через события data и end. В Express используется middleware express.json() для автоматического парсинга JSON.