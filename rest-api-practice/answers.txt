1. Основные принципы REST: единообразие интерфейса, отсутствие состояния, кешируемость, клиент-серверная архитектура, многоуровневая система, код по требованию (опционально).

2. PUT полностью заменяет ресурс новыми данными, PATCH частично обновляет только указанные поля ресурса. PUT требует отправки полного представления ресурса, PATCH - только изменяемых полей.

3. 200 OK - успех, 201 Created - создано, 400 Bad Request - ошибка клиента, 401 Unauthorized - не авторизован, 403 Forbidden - доступ запрещен, 404 Not Found - не найдено, 500 Internal Server Error - ошибка сервера.

4. Ресурсо-ориентированный дизайн URL использует существительные для обозначения ресурсов и HTTP-методы для операций. Например: /users для коллекции, /users/123 для конкретного пользователя.

5. Пагинация улучшает производительность API, уменьшает объем передаваемых данных, упрощает навигацию по большим наборам данных и снижает нагрузку на сервер.

6. Валидация данных организуется на уровне схем (JSON Schema), с проверкой типов, обязательных полей, форматов. Используются middleware валидации или библиотеки типа Joi, Yup.

7. Подходы к обработке ошибок: единый формат ответов об ошибках, понятные сообщения, соответствующие HTTP-статусы, детальная информация для разработчиков (в development), логирование ошибок.

8. Path parameters определяют структуру URL и идентифицируют ресурс (/users/{id}), query parameters используются для фильтрации, сортировки, пагинации и не влияют на структуру пути (/users?page=1&limit=10).