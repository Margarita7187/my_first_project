1. GET - получение данных, POST - создание, PUT - полное обновление, PATCH - частичное обновление, DELETE - удаление. Выбор метода зависит от семантики операции.

2. Обработка ошибок через try/catch, проверка статусов ответа, универсальные обработчики ошибок, уведомления пользователя, логирование для анализа.

3. CORS (Cross-Origin Resource Sharing) - механизм доступа к ресурсам другого домена. Для разработки настраивается заголовок Access-Control-Allow-Origin на сервере или через прокси.

4. Подходы к управлению состоянием: локальное состояние компонентов, глобальные стейт-менеджеры (Redux, MobX), серверные состояния (React Query, SWR), конечные автоматы.

5. Индикация загрузки: скелетоны вместо спиннеров, прогресс-бары, частичное обновление интерфейса, сохранение предыдущих данных до загрузки новых.

6. Оптимистичные обновления: мгновенное отображение изменений с последующей синхронизацией с сервером. Преимущества - лучшая UX, недостатки - сложность отката при ошибках.

7. Клиентская валидация - для быстрого фидбека, серверная - для гарантии корректности данных. Используются схемы валидации (Yup, Zod), синхронизация правил.

8. Методы кэширования: HTTP-кэширование (ETag, Cache-Control), in-memory кэш, persisted-кэш, стратегии stale-while-revalidate, инвалидация по ключам или временным меткам.