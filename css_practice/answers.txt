1. Селектор по ID имеет более высокую специфичность, чем селектор по классу. Значение специфичности для ID составляет 0,1,0,0, а для класса - 0,0,1,0. ID должен быть уникальным на странице и может использоваться только для одного элемента, тогда как классы предназначены для многократного применения к разным элементам. Это делает классы более гибкими для стилизации групп элементов с общими характеристиками.

2. Каскад в CSS определяет порядок применения стилей при конфликте правил. Стили применяются в следующем порядке: сначала пользовательские стили браузера, затем авторские стили из внешних файлов, потом авторские стили внутри страницы, и наконец инлайн-стили. При равной специфичности побеждает правило, объявленное последнее. Также учитывается важность правила с помощью !important.

3. Специфичность для ul li.important составляет 0,0,2,2 (два элемента и один класс). Для #site-title специфичность равна 0,1,0,0 (один ID). Для селектора .content > .featured-post специфичность составляет 0,0,2,0 (два класса).

4. Наследуемые свойства: color, font-family, line-height, font-size, text-align. Эти свойства автоматически передаются от родительских элементов к дочерним. Ненаследуемые свойства: background, border, margin, padding, width, height. Эти свойства не наследуются и должны задаваться явно для каждого элемента.

5. Селектор > выбирает только непосредственных дочерних элементов, тогда как селектор потомков через пробел выбирает всех потомков на любой глубине вложенности. Например, .parent > div выберет только прямые дочерние div элементы, а .parent div выберет все div внутри .parent независимо от уровня вложенности.

6. Псевдокласс :hover применяет стили при наведении курсора на элемент, используется для создания интерактивности - изменения цвета ссылок, кнопок, появления подсказок. :nth-child() выбирает элементы по их порядковому номеру в родительском контейнере, применяется для создания полосатых таблиц, выделения определенных элементов в списках, сложных сеток.

7. Правило !important повышает приоритет свойства над всеми другими правилами независимо от специфичности. Его следует использовать осторожно, потому что он нарушает естественный каскад CSS, затрудняет поддержку кода и может привести к непредсказуемым результатам при масштабировании проекта.

8. Псевдоэлементы ::before и ::after позволяют добавлять декоративный контент до или после содержимого элемента без изменения HTML-разметки. Они могут содержать текст, иконки, декоративные элементы, сгенерированные номера. Часто используются для добавления иконок, декоративных разделителей, кавычек, визуальных эффектов.

9. При одинаковой специфичности браузер применяет CSS-правила в порядке их объявления в коде - последнее объявленное правило имеет приоритет. Это касается как порядка в пределах одного файла, так и порядка подключения CSS-файлов в HTML-документе.

10. Инструменты разработчика позволяют инспектировать элементы, просматривать примененные стили, анализировать специфичность селекторов, отлаживать наследование свойств. Можно временно изменять CSS-свойства и сразу видеть результат, отслеживать каскад стилей, диагностировать проблемы с отображением, тестировать адаптивность на разных размерах экранов.