1. innerHTML позволяет вставлять HTML-разметку, интерпретируя теги, тогда как textContent работает только с текстом, экранируя символы. innerHTML следует использовать для вставки разметки, но с осторожностью из-за рисков XSS, а textContent - для безопасного добавления текста.

2. Делегирование событий основано на всплытии - обработчик вешается на родительский контейнер, а не на каждый элемент. Это позволяет работать с динамически добавляемыми элементами без перепривязки событий и экономит память.

3. getElementById возвращает один элемент по ID, querySelector - первый подходящий элемент по CSS-селектору, querySelectorAll - NodeList всех подходящих элементов. querySelectorAll более универсален, но getElementById быстрее для поиска по ID.

4. preventDefault() отменяет стандартное поведение браузера. Это необходимо при обработке форм (чтобы страница не перезагружалась), кликов по ссылкам и других стандартных действий.

5. classList.add() добавляет класс к существующим, className полностью перезаписывает строку классов. classList предпочтительнее для добавления/удаления отдельных классов.

6. Создать элемент можно через createElement() с последующим appendChild() или innerHTML, либо через insertAdjacentHTML(). Наиболее эффективен createElement() с последовательным добавлением в DOM.

7. Всплытие событий - процесс передачи события от целевого элемента вверх по дереву DOM. stopPropagation() прерывает это всплытие, не позволяя родительским элементам получить событие.

8. Данные формы можно получить через свойства value элементов, FormData API или serialize. FormData удобен для отправки на сервер, а прямой доступ к value - для быстрой обработки.

9. input срабатывает при каждом изменении, change - после потери фокуса, keyup - при отпускании клавиши. input лучше для валидации в реальном времени, change - для финальной проверки.

10. Оптимизация включает использование DocumentFragment для групповых операций, минимизацию перерисовок, кеширование ссылок на элементы и избегание частых чтений layout-свойств.