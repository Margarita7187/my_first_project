1. event.preventDefault() отменяет стандартное действие браузера (например, отправку формы или переход по ссылке), а event.stopPropagation() останавливает всплытие события по DOM-дереву. preventDefault используется когда нужно предотвратить поведение по умолчанию, а stopPropagation - когда нужно чтобы родительские элементы не получили это событие.

2. Делегирование событий работает через назначение одного обработчика на родительский элемент, который получает события от дочерних элементов благодаря всплытию. Преимущества: экономия памяти, работа с динамически добавляемыми элементами без перепривязки, упрощение кода.

3. Фазы жизненного цикла события: capturing (перехват - сверху вниз до целевого элемента), target (обработка на целевом элементе), bubbling (всплытие - снизу вверх). Порядок выполнения: сначала обработчики на фазе перехвата, затем на целевом элементе, затем на фазе всплытия.

4. event.target указывает на исходный элемент, который инициировал событие, а event.currentTarget - на элемент, на котором currently выполняется обработчик. target используется чтобы определить источник события, currentTarget - чтобы работать с элементом-обработчиком.

5. Кастомное событие создается через new CustomEvent('имяСобытия', {detail: данные, bubbles: true, cancelable: true}) и запускается через dispatchEvent(). В конструктор можно передать объект с настройками: detail для данных, bubbles для всплытия, cancelable для возможности отмены.

6. Debounce откладывает выполнение функции до тех пор, пока не пройдет определенное время с последнего вызова, throttle ограничивает частоту выполнения функции. Debounce эффективен для поиска по вводу, throttle - для обработки скролла или resize.

7. Методы удаления: removeEventListener() для обработчиков, добавленных через addEventListener(), и присвоение null для обработчиков, назначенных через onсобытие. Удаление важно для предотвращения утечек памяти и нежелательного поведения.

8. Для обработки ошибок ресурсов используются события: error для изображений и скриптов, onerror для глобальных ошибок. Можно добавить обработчик на сам элемент (img.onerror) или использовать глобальный обработчик window.addEventListener('error').

9. addEventListener позволяет добавлять несколько обработчиков на одно событие, контролировать фазу (capturing/bubbling), имеет больше опций. Прямое назначение через onсобытие перезаписывает предыдущие обработчики и менее гибко.

10. Оптимизация: делегирование событий, использование пассивных обработчиков для scroll/touch, удаление ненужных обработчиков, ограничение частоты с помощью throttle/debounce, избегание синхронных операций в обработчиках.